diff --git a/numpy/core/tests/test_regression.py b/numpy/core/tests/test_regression.py
index 66a2e2858..9afb7ff62 100644
--- a/numpy/core/tests/test_regression.py
+++ b/numpy/core/tests/test_regression.py
@@ -100,7 +100,7 @@ class TestRegression(object):
             f = BytesIO()
             pickle.dump(ca, f, protocol=proto)
             f.seek(0)
-            ca = np.load(f)
+            ca = np.load(f, allow_pickle=True)
             f.close()
 
     def test_noncontiguous_fill(self):
diff --git a/numpy/lib/format.py b/numpy/lib/format.py
index 10945e5e8..8cfdab507 100644
--- a/numpy/lib/format.py
+++ b/numpy/lib/format.py
@@ -567,7 +567,7 @@ def _read_array_header(fp, version):
 
     return d['shape'], d['fortran_order'], dtype
 
-def write_array(fp, array, version=None, allow_pickle=True, pickle_kwargs=None):
+def write_array(fp, array, version=None, allow_pickle=None, pickle_kwargs=None):
     """
     Write an array to an NPY file, including a header.
 
@@ -586,7 +586,10 @@ def write_array(fp, array, version=None, allow_pickle=True, pickle_kwargs=None):
         The version number of the format. None means use the oldest
         supported version that is able to store the data.  Default: None
     allow_pickle : bool, optional
-        Whether to allow writing pickled data. Default: True
+        Whether to allow writing pickled data. Default: None
+        In numpy <= 1.16.1 the value defaults to True. This default is being
+        deprecated during 1.17, with a value of None now triggering a warning,
+        and in 1.18 allow_pickle=None will default to False.
     pickle_kwargs : dict, optional
         Additional keyword arguments to pass to pickle.dump, excluding
         'protocol'. These are only useful when pickling objects in object
@@ -618,6 +621,15 @@ def write_array(fp, array, version=None, allow_pickle=True, pickle_kwargs=None):
         buffersize = max(16 * 1024 ** 2 // array.itemsize, 1)
 
     if array.dtype.hasobject:
+        if allow_pickle is None:
+            # TODO: remove in 1.18 after deprecation in 1.17
+            allow_pickle = False
+            msg = ("Object arrays will not be saved by default in the future"
+                    " because `allow_pickle` will default to False. You should"
+                    " add `allow_pickle=True` explicitly to elminate this"
+                    " warning.")
+            warnings.warn(msg, FutureWarning, stacklevel=2)
+
         # We contain Python objects so we cannot write out the data
         # directly.  Instead, we will pickle it out with version 2 of the
         # pickle protocol.
@@ -645,7 +657,7 @@ def write_array(fp, array, version=None, allow_pickle=True, pickle_kwargs=None):
                 fp.write(chunk.tobytes('C'))
 
 
-def read_array(fp, allow_pickle=True, pickle_kwargs=None):
+def read_array(fp, allow_pickle=None, pickle_kwargs=None):
     """
     Read an array from an NPY file.
 
@@ -655,7 +667,10 @@ def read_array(fp, allow_pickle=True, pickle_kwargs=None):
         If this is not a real file object, then this may take extra memory
         and time.
     allow_pickle : bool, optional
-        Whether to allow reading pickled data. Default: True
+        Whether to allow writing pickled data. Default: None
+        In numpy <= 1.16.1 the value defaults to True. This default is being
+        deprecated during 1.17, with a value of None now triggering a warning,
+        and in 1.18 allow_pickle=None will default to False.
     pickle_kwargs : dict
         Additional keyword arguments to pass to pickle.load. These are only
         useful when loading object arrays saved on Python 2 when using
@@ -683,6 +698,15 @@ def read_array(fp, allow_pickle=True, pickle_kwargs=None):
 
     # Now read the actual data.
     if dtype.hasobject:
+        if allow_pickle is None:
+            # TODO: remove in 1.18 after deprecation in 1.17
+            allow_pickle = False
+            msg = ("Object arrays will not be saved by default in the future"
+                    " because `allow_pickle` will default to False. You should"
+                    " add `allow_pickle=True` explicitly to elminate this"
+                    " warning.")
+            warnings.warn(msg, FutureWarning, stacklevel=2)
+
         # The array contained Python objects. We need to unpickle the data.
         if not allow_pickle:
             raise ValueError("Object arrays cannot be loaded when "
diff --git a/numpy/lib/npyio.py b/numpy/lib/npyio.py
index db6a8e5eb..b27c0ef6d 100644
--- a/numpy/lib/npyio.py
+++ b/numpy/lib/npyio.py
@@ -146,7 +146,10 @@ class NpzFile(Mapping):
         An object on which attribute can be performed as an alternative
         to getitem access on the `NpzFile` instance itself.
     allow_pickle : bool, optional
-        Allow loading pickled data. Default: True
+        Whether to allow writing pickled data. Default: None
+        In numpy <= 1.16.1 the value defaults to True. This default is being
+        deprecated during 1.17, with a value of None now triggering a warning,
+        and in 1.18 allow_pickle=None will default to False.
     pickle_kwargs : dict, optional
         Additional keyword arguments to pass on to pickle.load.
         These are only useful when loading object arrays saved on
@@ -182,7 +185,7 @@ class NpzFile(Mapping):
 
     """
 
-    def __init__(self, fid, own_fid=False, allow_pickle=True,
+    def __init__(self, fid, own_fid=False, allow_pickle=None,
                  pickle_kwargs=None):
         # Import is postponed to here since zipfile depends on gzip, an
         # optional component of the so-called standard library.
@@ -285,7 +288,7 @@ class NpzFile(Mapping):
 
 
 @set_module('numpy')
-def load(file, mmap_mode=None, allow_pickle=True, fix_imports=True,
+def load(file, mmap_mode=None, allow_pickle=None, fix_imports=True,
          encoding='ASCII'):
     """
     Load arrays or pickled objects from ``.npy``, ``.npz`` or pickled files.
@@ -308,7 +311,10 @@ def load(file, mmap_mode=None, allow_pickle=True, fix_imports=True,
         disallowing pickles include security, as loading pickled data can
         execute arbitrary code. If pickles are disallowed, loading object
         arrays will fail.
-        Default: True
+        Default: None
+        In numpy <= 1.16.1 the value defaulted to True. This default is being
+        deprecated during 1.17, with a value of None now triggering a warning,
+        and in 1.18 allow_pickle=None will default to False.
     fix_imports : bool, optional
         Only useful when loading Python 2 generated pickled files on Python 3,
         which includes npy/npz files containing object arrays. If `fix_imports`
@@ -458,7 +464,7 @@ def _save_dispatcher(file, arr, allow_pickle=None, fix_imports=None):
 
 
 @array_function_dispatch(_save_dispatcher)
-def save(file, arr, allow_pickle=True, fix_imports=True):
+def save(file, arr, allow_pickle=None, fix_imports=True):
     """
     Save an array to a binary file in NumPy ``.npy`` format.
 
@@ -478,7 +484,10 @@ def save(file, arr, allow_pickle=True, fix_imports=True):
         Python installations, for example if the stored objects require libraries
         that are not available, and not all pickled data is compatible between
         Python 2 and Python 3).
-        Default: True
+        Default: None
+        In numpy <= 1.16.1 the value defaulted to True. This default is being
+        deprecated during 1.17, with a value of None now triggering a warning,
+        and in 1.18 allow_pickle=None will default to False.
     fix_imports : bool, optional
         Only useful in forcing objects in object arrays on Python 3 to be
         pickled in a Python 2 compatible way. If `fix_imports` is True, pickle
@@ -535,8 +544,9 @@ def save(file, arr, allow_pickle=True, fix_imports=True):
 def _savez_dispatcher(file, *args, **kwds):
     for a in args:
         yield a
-    for v in kwds.values():
-        yield v
+    for k, v in kwds.items():
+        if k != 'allow_pickle':
+            yield v
 
 
 @array_function_dispatch(_savez_dispatcher)
@@ -561,6 +571,15 @@ def savez(file, *args, **kwds):
         know the names of the arrays outside `savez`, the arrays will be saved
         with names "arr_0", "arr_1", and so on. These arguments can be any
         expression.
+    allow_pickle : bool, optional
+        Allow loading pickled object arrays stored in npy files. Reasons for
+        disallowing pickles include security, as loading pickled data can
+        execute arbitrary code. If pickles are disallowed, loading object
+        arrays will fail.
+        Default: None
+        In numpy <= 1.16.1 the value defaulted to True. This default is being
+        deprecated during 1.17, with a value of None now triggering a warning,
+        and in 1.18 allow_pickle=None will default to False.
     kwds : Keyword arguments, optional
         Arrays to save to the file. Arrays will be saved in the file with the
         keyword names.
@@ -616,14 +635,16 @@ def savez(file, *args, **kwds):
     array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
 
     """
-    _savez(file, args, kwds, False)
+    _allow_pickle = kwds.pop('allow_pickle', None)
+    _savez(file, args, kwds, False, allow_pickle=_allow_pickle)
 
 
 def _savez_compressed_dispatcher(file, *args, **kwds):
     for a in args:
         yield a
-    for v in kwds.values():
-        yield v
+    for k, v in kwds.items():
+        if k != 'allow_pickle':
+            yield v
 
 
 @array_function_dispatch(_savez_compressed_dispatcher)
@@ -688,10 +709,11 @@ def savez_compressed(file, *args, **kwds):
     True
 
     """
-    _savez(file, args, kwds, True)
+    _allow_pickle = kwds.pop('allow_pickle', None)
+    _savez(file, args, kwds, compress=True, allow_pickle=_allow_pickle)
 
 
-def _savez(file, args, kwds, compress, allow_pickle=True, pickle_kwargs=None):
+def _savez(file, args, kwds, compress, allow_pickle=None, pickle_kwargs=None):
     # Import is postponed to here since zipfile depends on gzip, an optional
     # component of the so-called standard library.
     import zipfile
diff --git a/numpy/lib/tests/test_format.py b/numpy/lib/tests/test_format.py
index 077507082..4a016562c 100644
--- a/numpy/lib/tests/test_format.py
+++ b/numpy/lib/tests/test_format.py
@@ -424,9 +424,9 @@ class BytesIOSRandomSize(BytesIO):
 
 def roundtrip(arr):
     f = BytesIO()
-    format.write_array(f, arr)
+    format.write_array(f, arr, allow_pickle=True)
     f2 = BytesIO(f.getvalue())
-    arr2 = format.read_array(f2)
+    arr2 = format.read_array(f2, allow_pickle=True)
     return arr2
 
 
@@ -576,7 +576,7 @@ def test_pickle_python2_python3():
         path = os.path.join(data_dir, fname)
 
         for encoding in ['bytes', 'latin1']:
-            data_f = np.load(path, encoding=encoding)
+            data_f = np.load(path, allow_pickle=True, encoding=encoding)
             if fname.endswith('.npz'):
                 data = data_f['x']
                 data_f.close()
@@ -598,16 +598,19 @@ def test_pickle_python2_python3():
         if sys.version_info[0] >= 3:
             if fname.startswith('py2'):
                 if fname.endswith('.npz'):
-                    data = np.load(path)
+                    data = np.load(path, allow_pickle=True)
                     assert_raises(UnicodeError, data.__getitem__, 'x')
                     data.close()
-                    data = np.load(path, fix_imports=False, encoding='latin1')
+                    data = np.load(path, allow_pickle=True, fix_imports=False,
+                                   encoding='latin1')
                     assert_raises(ImportError, data.__getitem__, 'x')
                     data.close()
                 else:
-                    assert_raises(UnicodeError, np.load, path)
+                    assert_raises(UnicodeError, np.load, path,
+                                  allow_pickle=True)
                     assert_raises(ImportError, np.load, path,
-                                  encoding='latin1', fix_imports=False)
+                                  allow_pickle=True, fix_imports=False,
+                                  encoding='latin1')
 
 
 def test_pickle_disallow():
diff --git a/numpy/lib/tests/test_io.py b/numpy/lib/tests/test_io.py
index 7ef25538b..591b01395 100644
--- a/numpy/lib/tests/test_io.py
+++ b/numpy/lib/tests/test_io.py
@@ -86,8 +86,8 @@ class RoundtripTest(object):
             Arrays stored to file.
 
         """
-        save_kwds = kwargs.get('save_kwds', {})
-        load_kwds = kwargs.get('load_kwds', {})
+        save_kwds = kwargs.get('save_kwds', {"allow_pickle": True})
+        load_kwds = kwargs.get('load_kwds', {"allow_pickle": True})
         file_on_disk = kwargs.get('file_on_disk', False)
 
         if file_on_disk:
